#include "TraceRoute.h"



void SanitizeInput(char *inStr, char *outStr)
{
	// Input received from user is generally terminated by a CLRF
	// Extract actual input srting from the Received input
	int idx = 0;

	WriteToLog("Sanitizing client input...");

	for (idx=1; idx <strlen(inStr);idx++)
	{
		// Checking for CL followed by CF
		if (inStr[idx] == 10 && inStr[idx-1] == 13)
		{
			outStr[idx-1]= '\0';
			break;
		}
		else
			outStr[idx-1] = inStr[idx-1];
	}

	// NULL Terminating the output string
	outStr[idx-1] = '\0';

	WriteToLog("Sanitization complete...");
}



int GetCmdRate(time_t *pWindowTime, int rate)
{
		
	//time_t *window_time = pWindowTime;
	time_t tNow = time(0);
	
	localtime(&tNow);
	
	if (!*pWindowTime)
	{
		*pWindowTime = tNow;
		rate++;
	}
	else
	{
		if(tNow-*pWindowTime > gRateDuration )
		{
			*pWindowTime = tNow;
			rate = 1;
		}
		else
		{
			rate++;
		}
	}

	return rate;
		
}




void RemoveUserInfo(int sockfd)
{
	int idx = 0,pos=0;

	for(idx = 0;idx<MAX_USERS;idx++)
	{
		if(siUsers[idx].sockfd == sockfd)
		{
			pos = idx;
			break;
		}
	}

	for(idx = pos;idx<MAX_USERS;idx++)
		siUsers[idx] = siUsers[idx+1];

	siUsers[MAX_USERS-1].ip = '\0';
	siUsers[MAX_USERS-1].sockfd = -1;
}




void TraceRoute(char dest[], int sockfd)
{
    FILE *pipeFile;
    char outBuff[BUFSIZE];
    char cmd[256];
    char endTxt[] = "\t\t*****TRACE COMPLETE*****\n";

    WriteToLog("Running traceroute");

    char message[]="Tracing route now\n";
    if (send(sockfd,message,strlen(message),0) != -1)
    {/*...*/}

    snprintf(cmd,255,"traceroute %s",dest);
    pipeFile = popen(cmd, "r");

    while(fgets(outBuff, BUFSIZE-1, pipeFile))
    {
    	//printf("%s",outBuff);
   		if (send(sockfd,outBuff,strlen(outBuff),0) != -1)
   		{/*...*/}
    }

    if (send(sockfd,endTxt,strlen(endTxt),0) != -1)
    {/*...*/}

    pclose(pipeFile);
    WriteToLog("Traceroute complete...");
}






void EvalTraceOpts(char * pOptions, int sockfd)
{
	int idx,idx1,iFileNameCounter=0;
	char fileName[200]; //Determine appropriate value
	int bInvalidInput=FALSE;
	int bFlag=FALSE;
	FILE *fp;
	char sLine[200]; // need to set buffer accordingly
	char cmd[200];

	for (idx=0; idx <strlen(pOptions); idx++)
	{
		if (pOptions[idx] == ' ')
		{
			fileName[iFileNameCounter] = '\0';
			bFlag=TRUE;
			break;
		}
		else
			fileName[iFileNameCounter++] = pOptions[idx];
	}


	if (!bFlag)
		fileName[iFileNameCounter] = '\0';


	for (idx1=idx; idx1 < strlen(pOptions); idx1++)
	{
		if(pOptions[idx1] == ' ')
			continue;
		else
			bInvalidInput = TRUE;
	}


	if (bInvalidInput)
	{
		// #TODO We need to print help
		printf("Incorrect after traceroute options\n");
		return;
	}

	if (strcmp(fileName,"me") == 0) {
		// TODO Traceroute to the client's ip
		WriteToLog("Call Traceroute for client's ip");
		for(idx=0;idx<active_sessions;idx++)
		{
			if(siUsers[idx].sockfd == sockfd)
			{
				TraceRoute(siUsers[idx].ip,siUsers[idx].sockfd);
				return;
			}
		}

	}
	else
	{
		if((fp =fopen(fileName,"r")) == NULL)
		{
			// letters, . , - , numbers
			bFlag = FALSE;
			for (idx=0; idx<strlen(fileName); idx++) {
				if (!(fileName[idx] == '.' || fileName[idx] == '-'
					|| (fileName[idx] >= 48 && fileName[idx] <=57)
					|| (fileName[idx] >= 65 && fileName[idx] <=90)
					|| (fileName[idx] >= 97 && fileName[idx] <=122))) {
					bFlag = TRUE;
				}
			}

			if (bFlag)
			{

				char message[]="Invalid DNS/IP entered\n";
				if (send(sockfd,message,strlen(message),0) != -1) {}
				return;
			}

			WriteToLog("Call Traceroute on dns/ip");
			TraceRoute(fileName, sockfd);
			WriteToLog("End");
		}
		else
		{
			WriteToLog("Call Traceroute for file");

			while (fscanf(fp,"%s %s",sLine,cmd) != EOF) {
				printf("%s: %s\n",sLine,cmd);
				TraceRoute(cmd, sockfd);
				return;
			}
		}
	}
}




int ParseUserInput(char *cmd, int sockfd)
{
	int idx;
	int bFlag=FALSE;
	char sCommand[100]; //set appropriate length later
	char sOptions[200]; //set appropriate length later
	char logText[] = "";

	sprintf(logText,"Client Sent :%s",cmd);
	WriteToLog(logText);

	WriteToLog("Parsing user input...");

	// Parse the user input and call functions appropriately
	for (idx=0;idx <strlen(cmd);idx++)
	{
		if (cmd[idx] == ' ')
		{
			sCommand[idx]='\0';
			bFlag=TRUE;
			break;
		}
		else
			sCommand[idx] = toupper(cmd[idx]);
	}


	if (!bFlag)
		sCommand[idx] = '\0';


	// Parse the options
	int idx1,idx2= 0;
	for (idx1=idx+1;idx1<strlen(cmd);idx1++)
		sOptions[idx2++] = cmd[idx1];


	sOptions[idx2] = '\0';


	// Parse the command and respective options
	if (strcmp(sCommand,"HELP") == 0)
	{
		WriteToLog("Sending HELP Information");
		DisplayHelp(sockfd);

	}
	else if (strcmp(sCommand,"QUIT") == 0)
	{
		WriteToLog("Attempting to release connection");

		char message[]="Goodbye!\n";
		if (send(sockfd,message,strlen(message),0) != -1)
		{/*...*/}
		return 1;
	}
	else if (strcmp(sCommand,"TRACEROUTE") == 0)
	{
		WriteToLog("Checking for Traceroute options...");
		EvalTraceOpts(sOptions, sockfd);
		WriteToLog("Trace done");
	}
	else
	{
		WriteToLog("Unknow command : Displaying HELP");
		DisplayHelp(sockfd);
	}

	WriteToLog("Parse/Processing complete...");
	return 0;

}




void *WaitForUserInput(void *accDesc)
{
	int sockfd  = (int)(intptr_t)accDesc;
	char strCmd[] = "";
	void *buffer = (void *)strCmd;
	char logText[BUFSIZE] = "";
	int retVal = 0;
	time_t window_time = time(0);
	time_t *timePtr = &window_time;
	int cmdRate = 0;

	while(1)
	{
		snprintf(logText,BUFSIZE-1,"Listening for User(%d) input...",sockfd);
		WriteToLog(logText);

		if (recv(sockfd, buffer, BUFSIZE-1, 0) != -1)
		{
			retVal = 0;
			cmdRate = GetCmdRate(timePtr, cmdRate);
			if(cmdRate > 0  && cmdRate <= gRateRequest)
			{
				SanitizeInput((char*)buffer,strCmd);
				retVal = ParseUserInput(strCmd,sockfd);
			}
			else
			{
				char message[] = "Maximum number of requests exceeded."
						" Please Wait for some time and try again\n";
				if (send(sockfd,message,strlen(message),0) != -1)
						{/*...*/}
						
			}

			if(retVal == 1)
				break;
		}
		else
		{
			snprintf(logText,BUFSIZE-1,
					"TIMEOUT EXPIRED : User(%d) Inactive",sockfd);
			WriteToLog(logText);

			break;
		}

	}

	close(sockfd);
	RemoveUserInfo(sockfd);
	active_sessions--;

	snprintf(logText,BUFSIZE-1,
			"Connection(%d) closed, exiting thread...",sockfd);
	WriteToLog(logText);

	fflush(stdout);
	pthread_exit(0);
	return NULL;
}





void CreateNewSession(int accDesc)
{
	pthread_t pth;

	if (active_sessions == MAX_USERS)
	{
		printf("Server busy, please try again later...\n");
		close(accDesc);
		return;
	}
	else
	{
		pthread_create(&pth,NULL,WaitForUserInput,(void *)(intptr_t)accDesc);
		active_sessions++;
	}
}

